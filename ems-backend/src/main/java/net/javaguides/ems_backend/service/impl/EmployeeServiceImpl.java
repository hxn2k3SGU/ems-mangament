package net.javaguides.ems_backend.service.impl;import net.javaguides.ems_backend.dto.EmployMapper;import net.javaguides.ems_backend.dto.EmployeeDTO;import net.javaguides.ems_backend.entity.Employee;import net.javaguides.ems_backend.exception.ResourceNotFoundException;import net.javaguides.ems_backend.repository.EmployeeRepository;import net.javaguides.ems_backend.service.EmployeeService;import org.springframework.stereotype.Service;import java.util.List;import java.util.stream.Collectors;@Servicepublic class EmployeeServiceImpl implements EmployeeService {    // Khai báo dependencies để giao tiếp voi    private EmployeeRepository employeeRepository;    // Constructor    public EmployeeServiceImpl(EmployeeRepository employeeRepository) {        this.employeeRepository = employeeRepository;    }    @Override    public EmployeeDTO createEmployee(EmployeeDTO employeeDTO) {        return null;    }    @Override    public EmployeeDTO createEmployeeById(EmployeeDTO employeeDTO) {        // Chuyển DTO sang entity        Employee employee = EmployMapper.mapToEmployee(employeeDTO);        // Lưu entity vào DB qua JpaRepository        Employee savedEmployee = employeeRepository.save(employee);        // Chuyển từ entity đã lưu thành DTO để trả về        return EmployMapper.mapToEmployeeDTO(savedEmployee);    }    @Override    // hàm này được gọi từ interface EmployeeSevice    // Là thằng đầy đủ được khai báo trong interface    // kiểu trả về là nhân viên DTO    // Tham số đầu vào là ID nhân viên    // Đầu tiền tìm thằng nhân viên thông qua repository    // Nếu không thấy thì nhả ra thông báo không tìm thấy + ID nhân viên đó    // nếu tìm thấy thì DTO hóa nó    public EmployeeDTO getEmployeeById(long EmployeeId) {        Employee employee = employeeRepository.findById(EmployeeId)                .orElseThrow(() -> new RuntimeException("Employee not found " + EmployeeId));        return EmployMapper.mapToEmployeeDTO(employee);    }    @Override    // Gọi phương thức findAll() từ employeeRepository để lấy tất cả các bản ghi nhân viên trong DB.    // Kết quả là một danh sách các đối tượng Employee (Entity).    public List<EmployeeDTO> getAllEmployees() {        // Gọi phương thức findAll() từ employeeRepository để lấy tất cả các bản ghi nhân viên trong DB.        // Kết quả là một danh sách các đối tượng Employee (Entity).        List<Employee> employees = employeeRepository.findAll();        // Duyệt qua danh sách employees bằng stream().        // Với mỗi phần tử (Employee), gọi phương thức mapToEmployeeDTO của EmployMapper để chuyển nó thành EmployeeDTO.        // Sau đó collect (gom) lại tất cả các EmployeeDTO vào một danh sách mới và trả về.        return employees.stream().map((employee -> EmployMapper.mapToEmployeeDTO(employee))).collect(Collectors.toList());    }    @Override    public EmployeeDTO updateEmployee(Long employeeID,EmployeeDTO employeeDTO) {        // Check xem ID của thằng nhân viên đó có tồn tại không        // nếu không thì cút        Employee employee = employeeRepository.findById(employeeID).orElseThrow(                () -> new ResourceNotFoundException("Employee is not exists with given id: " + employeeID)        );        // nếu có thì chạy các hàm sau        // Cập nhật các thông tin        employee.setFirstName(employeeDTO.getFirstName());        employee.setLastName(employeeDTO.getLastName());        employee.setEmail(employeeDTO.getEmail());        // Lưu xuống database qua repository        Employee savedEmployee = employeeRepository.save(employee);        // Map lại DTO để chuyển lên hiển thị        return EmployMapper.mapToEmployeeDTO(savedEmployee);    }    @Override    public void deleteEmployee(Long employeeID) {        Employee employee = employeeRepository.findById(employeeID).orElseThrow(                () -> new ResourceNotFoundException("Employee is not exists with given id: " + employeeID)        );        employeeRepository.deleteById(employeeID);    }}